syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package nextmu.v1;

service UpdateService {
    rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse);
    rpc FetchVersion(FetchVersionRequest) returns (FetchVersionResponse);
    rpc CreateVersion(CreateVersionRequest) returns (CreateVersionResponse);
    rpc EditVersion(EditVersionRequest) returns (google.protobuf.Empty);
    rpc StartUploadVersion(StartUploadVersionRequest) returns (StartUploadVersionResponse);
    rpc UploadVersionChunk(UploadVersionChunkRequest) returns (UploadVersionChunkResponse);
    rpc ProcessVersion(ProcessVersionRequest) returns (google.protobuf.Empty);
}

/*
* Enums
*/
enum VersionType {
    REVISION = 0;
    MINOR = 1;
    MAJOR = 2;
}

enum VersionState {
    PENDING = 0;
    READY = 1;
}

enum UploadState {
    NONE = 0;
    PENDING = 1;
    PROCESSING = 2;
    READY = 3;
}

/*
* Composed Types
*/
message Upload {
    string id = 1;
    string hash = 2;
    uint32 fileSize = 3;
    UploadState state = 4;
}

message Version {
    string id = 1;
    string version = 2;
    string description = 3;
    VersionState state = 4;
    uint32 files_count = 5;
    google.protobuf.Timestamp created_at = 6;
    google.protobuf.Timestamp updated_at = 7;
    optional Upload upload = 8;
}

/*
* Requests and Responses
*/
message ListVersionsRequest {
    uint32 page = 1;
    uint32 size = 2;
}
message ListVersionsResponse {
    uint32 available_count = 1;
    repeated Version versions = 2;
}

message FetchVersionRequest {
    string id = 1;
}
message FetchVersionResponse {
    Version version = 1;
}

message CreateVersionRequest {
    VersionType type = 1;
    string description = 2;
}
message CreateVersionResponse {
    string id = 1;
    string version = 2;
}

message EditVersionRequest {
    string id = 1;
    string description = 2;
}
//message EditVersionResponse {}

message ChunkInfo {
    uint32 offset = 1;
    uint32 size = 2;
}

message StartUploadVersionRequest {
    string version_id = 1;
    string hash = 2; // sha256
    string type = 3; // application/zip
    uint32 chunk_size = 4; // in bytes
    uint32 file_size = 5; // in bytes
}
message StartUploadVersionResponse {
    string upload_id = 1; // upload id
    string concurrent_id = 2;
    repeated ChunkInfo existing_chunks = 3; // provide resume upload support
}

message UploadVersionChunkRequest {
    string upload_id = 1; // fast fetch from mongo
    string concurrent_id = 2; // prevent multiple upload sessions of different file at same time
    uint32 offset = 3; // index offset based (not bytes offset), it would be multiplied with chunk_size
    bytes data = 4; // has to meet the chunk_size defined in start upload request except for the last portion of the file
}
message UploadVersionChunkResponse {
    bool finished = 1; // true if all chunks were uploaded and the version is ready to be processed and published this will return true
}

message ProcessVersionRequest {
    string id = 1;
}
//message ProcessVersionResponse {}